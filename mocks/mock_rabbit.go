// Code generated by MockGen. DO NOT EDIT.
// Source: messaging/rabbit_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	messaging "unity-messaging-service/messaging"
)

// MockRabbitInterface is a mock of RabbitInterface interface
type MockRabbitInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitInterfaceMockRecorder
}

// MockRabbitInterfaceMockRecorder is the mock recorder for MockRabbitInterface
type MockRabbitInterfaceMockRecorder struct {
	mock *MockRabbitInterface
}

// NewMockRabbitInterface creates a new mock instance
func NewMockRabbitInterface(ctrl *gomock.Controller) *MockRabbitInterface {
	mock := &MockRabbitInterface{ctrl: ctrl}
	mock.recorder = &MockRabbitInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRabbitInterface) EXPECT() *MockRabbitInterfaceMockRecorder {
	return m.recorder
}

// GetQueueName mocks base method
func (m *MockRabbitInterface) GetQueueName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueueName indicates an expected call of GetQueueName
func (mr *MockRabbitInterfaceMockRecorder) GetQueueName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueName", reflect.TypeOf((*MockRabbitInterface)(nil).GetQueueName))
}

// PostMessage mocks base method
func (m *MockRabbitInterface) PostMessage(targetQueue string, msg messaging.HubMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostMessage", targetQueue, msg)
}

// PostMessage indicates an expected call of PostMessage
func (mr *MockRabbitInterfaceMockRecorder) PostMessage(targetQueue, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockRabbitInterface)(nil).PostMessage), targetQueue, msg)
}
